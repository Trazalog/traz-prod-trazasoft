<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="95c09bd9-3bed-44db-a3d1-079933037bce" activeEnvironment="Default" name="REST Project 1" soapui-version="5.5.0" abortOnError="false" runType="SEQUENTIAL" resourceRoot="${projectDir}" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="ca0776e7-baae-4faf-b5f3-8496e8722f12" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://LAPTOP-F6UEQERJ:8089/</con:endpoint><con:endpoint>http://localhost</con:endpoint></con:endpoints><con:resource name="" path="/" id="5a28fa85-63b8-4500-b897-d9eb0a8368b5"><con:settings/><con:parameters/><con:method name="1" id="19f5ea3a-d787-4cec-afd1-e70405847c58" method="GET"><con:settings/><con:parameters/></con:method></con:resource></con:interface><con:restMockService id="05e83d5f-560e-4030-9277-ae7e7bbbd925" port="8080" path="/" host="LAPTOP-F6UEQERJ" name="http://localhost"><con:settings/><con:properties/><con:restMockAction name="/languageesp" method="GET" resourcePath="/language" id="6e5e60ee-edec-47dd-b9a6-1606ee7ec2bc"><con:settings/><con:defaultResponse>Español</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>import javax.xml.xpath.*
import groovy.xml.StreamingMarkupBuilder
import groovy.lang.Binding;
import groovy.lang.Script;
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def testCase = context.testCase;
def testStep = testCase.getTestStepByName("NAME_TESTStepRequest");  
def endpoint =testStep.getPropertyValue('Endpoint');
log.info endpoint;
def url = new URL(endpoint)
//def url = new URL("https://www.google.com/?aaa=111&amp;bbb=222&amp;ccc=33&amp;dd=1484088989_b23f248ac6e5d9a9b47475526bb92ee1")

// get all query params as list
def queryParams = url.query?.split('&amp;') // safe operator for urls without query params
// transform the params list to a Map spliting 
// each query param
def mapParams = queryParams.collectEntries { param -> param.split('=').collect { URLDecoder.decode(it) }}
if(mapParams['lang'] == 'spanish')
{
	context.ResultResponse = "Español"
}
else if(mapParams['lang'] == 'english')
{
	context.ResultResponse = "Ingles"
}
}
</con:dispatchPath><con:response name="Español" id="4b811275-a9f5-4927-9abc-f58686878b5e" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"labels":
{
"label":[
{
"id":"label1",
"texto":"hola"
},
{
"id":"label2",
"texto":"chau"
},
{
"id":"titulo",
"texto":"titulo"
},
{
"id":"descripcion",
"texto":"descripcion"
},
{
"id":"id",
"texto":"id"
},
{
"id":"stock",
"texto":"stock"
},
{
"id":"navegacion",
"texto":"Navegacion principal"
},
{
"id":"mistareas",
"texto":"Mis Tareas"
},
{
"id":"Etapas",
"texto":"Etapas"
},
{
"id":"Fraccionar",
"texto":"Fraccionar"
},
{
"id":"CargarCamion",
"texto":"Cargar Camion"
},
{
"id":"DescargaCamion",
"texto":"Descargar Camion"
},
{
"id":"EntrarCamion",
"texto":"Recepcion vehiculo"
},
{
"id":"SalidaCamion",
"texto":"Salida Camion"
},
{
"id":"duracion",
"texto":"duracion"
},
{
"id":"formulario",
"texto":"formulario"
},
{
"id":"formula",
"texto":"formula"
},
{
"id":"tareas",
"texto":"tareas"
},
{
"id":"empaque",
"texto":"empaque"
},
{
"id":"cantidad",
"texto":"cantidad"
},
{
"id":"producto",
"texto":"producto"
},
{
"id":"lote",
"texto":"lote"
},
{
"id":"materias",
"texto":"Origen"
},
{
"id":"disponible",
"texto":"Disponible"
},
{
"id":"disponible",
"texto":"Disponible"
},
{
"id":"equipo",
"texto":"Equipo"
},
{
"id":"capacidad",
"texto":"Capacidad"
},
{
"id":"label3",
"texto":"quien?"
}
]
}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/etapatodo" method="GET" resourcePath="/etapatodo" id="bb8261e0-53a3-4e8b-bd7c-dfbf81375c4b"><con:settings/><con:defaultResponse>todo</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="todo" id="9e109565-391a-4aed-8d6b-2217fd6081ed" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"etapas":
  {
"etapa":[
   {"id":1,
   "titulo":"siembra",
   "producto": "ajo Morado",
   "cantidad": 500,
   "unidad": "m2",
   "establecimiento":"finca 3",
   "recipiente": "Parcela 2",
   "orden": 73
   },
   {"id":2,
   "titulo":"siembra",
   "producto": "ajo Blanco grande",
   "cantidad": 300,
   "unidad": "m2",
   "establecimiento":"finca 1",
   "recipiente": "Deposito 22",
   "orden": 7
   },
   {"id":3,
   "titulo":"fraccionamiento",
   "producto": "ajo Morado limpio",
   "cantidad": 1500,
   "unidad": "cajas",
   "establecimiento":"Almace 13",
   "recipiente": "Deposito 24",
   "orden": 14
   },
   {"id":4,
   "titulo":"zaranda",
   "producto": "ajo Morado",
   "cantidad": 800,
   "unidad": "m2",
   "establecimiento":"Bahia 3",
   "recipiente": "Deposito 2",
   "orden": 15
   },
   {"id":5,
   "titulo":"estacionamiento",
   "producto": "ajo Morado fraccionado",
   "cantidad": 800,
   "unidad": "cajas",
   "establecimiento":"Almacen 1",
   "recipiente": "Deposito 2",
   "orden": "" 
   },
   {"id":6,
   "titulo":"siembra",
   "producto": "ajo Organico",
   "cantidad": 1500,
   "unidad": "m2",
   "establecimiento":"finca 2",
   "recipiente": "Parcela 3",
   "orden": 16
   },
   {"id":7,
   "titulo":"limpieza",
   "producto": "ajo Morado",
   "cantidad": 500,
   "unidad": "cajas",
   "establecimiento":"finca 3",
   "recipiente": "Deposito 2",
   "orden": 73
   },
   {"id":8,
   "titulo":"fraccionamiento",
   "producto": "ajo Chico",
   "cantidad": 200,
   "unidad": "m2",
   "establecimiento":"finca 3",
   "recipiente": "Deposito 5",
   "orden": 4
   },
   {"id":9,
   "titulo":"limpieza",
   "producto": "ajo Morado",
   "cantidad": 150,
   "unidad": "cajas",
   "establecimiento":"Almacen 3",
   "recipiente": "Deposito 21",
   "orden": 16
   },
   {"id":10,
   "titulo":"limpieza",
   "producto": "ajo Morado",
   "cantidad": 500,
   "unidad": "m2",
   "establecimiento":"finca 3",
   "recipiente": "Deposito 4",
   "orden": 8
   },
   {"id":11,
   "titulo":"estacionamiento",
   "producto": "ajo Organico limpio",
   "cantidad": 800,
   "unidad": "cajas",
   "establecimiento":"finca 4",
   "recipiente": "Parcela 5",
   "orden": ""
   },
   {"id":12,
   "titulo":"zaranda",
   "producto": "ajo Morado",
   "cantidad": 1500,
   "unidad": "m2",
   "establecimiento":"finca 3",
   "recipiente": "Deposito 2",
   "orden": 8
   },
   {"id":13,
   "titulo":"zaranda",
   "producto": "ajo Grande",
   "cantidad": 800,
   "unidad": "m2",
   "establecimiento":"finca 1",
   "recipiente": "Parcela 4",
   "orden": 713
   },
   {"id":14,
   "titulo":"fraccionamiento",
   "producto": "ajo Azul limpio",
   "cantidad": 100,
   "unidad": "cajas",
   "establecimiento":"Bahia 3",
   "recipiente": "Deposito 2",
   "orden": 731
   },
   {"id":15,
   "titulo":"estacionamiento",
   "producto": "ajo Morado de Calidad",
   "cantidad": 1500,
   "unidad": "m2",
   "establecimiento":"finca 3",
   "recipiente": "Parcela 42",
   "orden": 173
   }
   ]
   }
   }</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/menu" method="GET" resourcePath="/menu" id="eef4afd8-e813-4dd6-870f-3b9c2d998000"><con:settings/><con:defaultResponse>menu</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="menu" id="b556d95b-9392-4dbd-afec-09614435d555" httpResponseStatus="200"><con:settings/><con:responseContent>{"menus":
{
"menu": [{
            "titulo": "mistareas",
            "icono": "fa fa-circle-o",
            "link": "general/Tarea",
            "nivel": 1
        },
        {
            "titulo": "Etapas",
            "icono": "fa fa-circle-o",
            "link": "general/Etapa",
            "nivel": 1
        },
        {
            "titulo": "Fraccionar",
            "icono": "fa fa-circle-o",
            "link": "general/Etapa/fraccionar",
            "nivel": 1
        },
        {
            "titulo": "SalidaCamion",
            "icono": "fa fa-circle-o",
            "link": "general/Camion/salidaCamion",
            "nivel": 1
        },
         {
            "titulo": "CargarCamion",
            "icono": "fa fa-circle-o",
            "link": "general/Camion/cargarCamion",
            "nivel": 1
        },
        {
            "titulo": "DescargaCamion",
            "icono": "fa fa-circle-o",
            "link": "general/Camion/salidaCamion",
            "nivel": 1
        },
        {
            "titulo": "EntrarCamion",
            "icono": "fa fa-circle-o",
            "link": "general/Camion/entradaCamion",
            "nivel": 1
        }
        ]
        }
        }</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/etapas" method="GET" resourcePath="/etapas" id="33ac9060-72ea-4f6c-b4b7-cd20afee6eee"><con:settings/><con:defaultResponse>etapas</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="etapas" id="5433acb0-293f-4010-9c05-e11c6a59737f" httpResponseStatus="200"><con:settings/><con:responseContent>{
"etapas":
{"etapa":
[{
"id":1,
"titulo":"siembra",
"icon":"",
"link":"general/Etapa/nuevo?op=1"
},
{
"id":2,
"titulo":"zaranda",
"icon":"",
"link":"general/Etapa/nuevo?op=2"
},
{
"id":3,
"titulo":"limpieza",
"icon":"",
"link":"general/Etapa/nuevo?op=3"
},
{
"id":4,
"titulo":"estacionamiento",
"icon":"",
"link":"general/Etapa/nuevo?op=4"
},
{
"id":5,
"titulo":"fraccionamiento",
"icon":"",
"link":"general/Etapa/fraccionar"
}
]
}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/establecimientos1" method="GET" resourcePath="/establecimientos" id="85dfdfa5-d213-4505-88a8-e677dc450e28"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="establecimientos" id="01019a14-e4dd-41c8-9e12-57aedff07791" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
"establecimientos":
{"establecimiento":
[
{
"id":"1",
 "titulo":"Finca1"
 },
 {
 "id":"2",
 "titulo":"Finca2"
 },
 {"id":"3",
 "titulo":"Finca3"
 }
 ]
}
 }</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/recipientes1" method="GET" resourcePath="/recipientes" id="8cce6a80-7f93-482c-b8a2-1106b926ca7e"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="recipientes" id="53c67cfa-8dc5-42b4-809b-91b04f5b1536" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
"recipientes":
{"recipiente":
[
{
"id":1,
 "titulo":"Recipiente1"
 },
 {
 "id":2,
 "titulo":"Recipiente2"
 },
 {
 "id":3,
 "titulo":"Recipiente3"
 }
 ]
}
 }</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/recipientes2" method="GET" resourcePath="/recipientes2" id="b122707d-fe2b-40af-b1e6-fac1512e21a5"><con:settings/><con:defaultResponse>recipientes</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="recipientes" id="a0217a8a-9d26-4294-84bc-0a1a3e8c3ae1" httpResponseStatus="200"><con:settings/><con:responseContent>{
"recipientes":
{"recipiente":
[
{
"id":4,
 "titulo":"Parcela1"
 },
 {
 "id":5,
 "titulo":"Parcela2"
 },
 {
 "id":6,
 "titulo":"Parcela3"
 }
 ]
 }
 }</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/establecimientos2" method="GET" resourcePath="/establecimientos2" id="535f07dc-01f5-4c08-99fe-160977fbfa28"><con:settings/><con:defaultResponse>establecimientos</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="establecimientos" id="a9c94bd8-e655-4f27-ba9c-f768e58bb4f4" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
"establecimientos":
{"establecimiento":
[
{
"id":"4",
 "titulo":"Almacen1"
 },
 {
 "id":"5",
 "titulo":"Almacen2"
 },
 {"id":"6",
 "titulo":"Almacen3"
 }
 ]
}
 }</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/tareas" method="GET" resourcePath="/tareas" id="91c0d2f8-f41b-40a8-9618-c471e25690ae"><con:settings/><con:defaultResponse>tareas</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="tareas" id="ac3f0eab-8aa1-4ccf-9894-c57d2c61a906" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"tareas":
{"tarea":
[
{"id":1,
 "titulo": "regar",
 "descripcion": "regar parcelas",
 "duracion": "4 horas",
 "formulario":"",
 "formula":
 [{"titulo":"fertilizante",
  "cantidad":200,
  "unidad":"kg"
 },
 {"titulo":"Nutriente 7",
  "cantidad":300,
  "unidad":"kg"
 },
 {"titulo":"Recurso 4",
  "cantidad":100,
  "unidad":"litros"
 }]
},
{"id":2,
 "titulo": "cortar",
 "descripcion": "cortar el ajo",
 "duracion": "6 horas",
  "formula":"",
 "formulario":11
},
{"id":3,
 "titulo": "dividir en cajas",
 "descripcion": "separar y repartir en cajas",
 "duracion": "8 horas",
  "formula":
 [{"titulo":"fertilizante",
  "cantidad":200,
  "unidad":"kg"
 },
 {"titulo":"Recurso 4",
  "cantidad":100,
  "unidad":"litros"
 }],
 "formulario":11
},
{"id":4,
 "titulo": "limpiar",
 "descripcion": "limpiar la estancia",
 "duracion": "2 horas",
  "formula":"",
 "formulario":""
},
{"id":5,
 "titulo": "cosechar",
 "descripcion": "cosechar la cosecha jeje",
 "duracion": "9 horas",
  "formula":
 [{"titulo":"fertilizante",
  "cantidad":200,
  "unidad":"kg"
 }],
 "formulario":""
}
]
}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/templates" method="GET" resourcePath="/templates" id="eae4c959-396c-4092-980b-03392d86d09a"><con:settings/><con:defaultResponse>templates</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="templates" id="17c1eb6f-e217-4a81-acda-ff24414a9747" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"templates":
{"template":
[
{"id":1,
 "titulo":"cosechona",
 "descripcion": "tareas cosecha",
 "tareas":
 [{"id":1,
 "titulo": "regar",
 "descripcion": "regar parcelas",
 "duracion": "4 horas"
},
{"id":2,
 "titulo": "cortar",
 "descripcion": "cortar el ajo",
 "duracion": "6 horas"
},
{"id":5,
 "titulo": "cosechar",
 "descripcion": "cosechar la cosecha jeje",
 "duracion": "9 horas"
}
]
},
{"id":2,
 "titulo":"Ultima etapa",
 "descripcion": "tareas referidas al fin",
 "tareas":
 [
 {"id":4,
 "titulo": "limpiar",
 "descripcion": "limpiar la estancia",
 "duracion": "2 horas"
},
{"id":3,
 "titulo": "dividir en cajas",
 "descripcion": "separar y repartir en cajas",
 "duracion": "8 horas"
}
]
}
]
}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/materias" method="GET" resourcePath="/materias" id="0b7adf98-4da0-43ea-81ad-f973f0863dba"><con:settings/><con:defaultResponse>materias</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="materias" id="81f28040-df54-412e-be76-75e0b535f5a8" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"materias":
{"materia":
[
{"id":1,
 "titulo": "Ajo Morado",
 "descripcion":"ajito",
 "stock":700
},
{"id":2,
"titulo": "ajo organico",
"descripcion" : "solo para chetos",
"stock":500
},
{"id":3,
"titulo": "ajo Verde",
"descripcion" : "Aun crudo",
"stock":1000
}
]
}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/lotes1" method="GET" resourcePath="/lotes1" id="0c56e0cb-bf78-425c-b1e6-22bc0f0c1d3d"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="b29e9bc8-e450-4c87-89da-3a72e49b7635" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"lotes":
{"lote":
[
{"id":1,
"titulo": "LN15",
"stock": 500,
"establecimiento":"Finca 1",
"recipiente":"Deposito 13"
},
{"id":2,
"titulo": "LN40",
"stock": 300,
"establecimiento":"Finca 3",
"recipiente":"Deposito 1"
},
{"id":1,
"titulo": "LN1",
"stock": 100,
"establecimiento":"Finca 2",
"recipiente":"Deposito 3"
}
]
}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/lotes2" method="GET" resourcePath="/lotes2" id="501b5a89-c041-4e51-820b-4c9c7be3ecd2"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="baab5272-9a0c-46fd-b765-7f29e5d2bac0" httpResponseStatus="200"><con:settings/><con:responseContent>{"lotes":
{"lote":
[
{"id":4,
"titulo": "LN4",
"stock": 300,
"establecimiento":"Finca 11",
"recipiente":"Deposito 5"
},
{"id":5,
"titulo": "LN3",
"stock": 1000,
"establecimiento":"Finca 6",
"recipiente":"Deposito 91"
},
{"id":6,
"titulo": "LN8",
"stock": 150,
"establecimiento":"Finca 3",
"recipiente":"Deposito 11"
}
]
}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/recursosmateriales" method="GET" resourcePath="/recursosmateriales" id="7d73f111-0211-4e98-9a92-aef6f0e60968"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="d4f986c5-54fd-4d0d-9fbc-79bb10f3aee5" httpResponseStatus="200"><con:settings/><con:responseContent>{"recursos":
{"recurso":
[
{"id":1,
"titulo":"fertlizante",
"lote":"LN10"
},
{"id":2,
"titulo":"Nutriente 7",
"lote":"LN5"
},
{"id":3,
"titulo":"Recurse 3",
"lote":"LN3"
},
{"id":4,
"titulo":"Recurso 4",
"lote":"LN4"
}
]
}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/listaportarea" method="GET" resourcePath="/listaportarea" id="6c31a1b5-b857-4214-8853-7813a2bc37ba"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="bf394a1e-1158-4891-9d74-df1a58195bab" httpResponseStatus="200"><con:settings/><con:responseContent>{"recursos":
{"recurso":
[
{"id":1,
"titulo":"fertlizante",
"lote":"LN10",
"cantidad":30
},
{"id":2,
"titulo":"Nutriente 7",
"lote":"LN5",
"cantidad":50
}
]
}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/recursostrabajo" method="GET" resourcePath="/recursostrabajo" id="24028789-adce-4e89-b3c5-271fe2131833"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="e4cf75cc-d090-4d16-9fe7-388394069e2b" httpResponseStatus="200"><con:settings/><con:responseContent>{"trabajos":
{"trabajo":
[
{"id":"TRA001",
 "Equipo":"Tractor",
 "Capacidad":"16 Hs x dia",
 "disponible":"true"
 },
 {"id":"C1002",
 "equipo":"Camion",
 "capacidad":"8 Hs x dia",
 "disponible":"false"
 },
 {"id":"CU006",
 "equipo":"Cuadrilla 5",
 "capacidad":"8 Hs x dia",
 "disponible":"false"
 },
 {"id":"MED03",
 "equipo":"Electricidad",
 "capacidad":"",
 "disponible":"true"
 }
 ]
 }
 }</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/etapasnuevo" method="GET" resourcePath="/etapasnuevo" id="d0403203-1b18-4b71-beb7-e503ea72e6aa"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="4b30d54e-d0f6-4129-9d77-d4bf4f7352cc" httpResponseStatus="200"><con:settings/><con:responseContent>{
	"etapa":
	{"id":4,
	"lote":"",
	"fecha":"",
	"titulo":"siembra",
	"establecimiento":"",
	"titulorecipiente":"Lote",
	"recipiente":"",
	"estado":"planificado",
	"op":"",
	"materias":"",
"tareas":""
	}
}
</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/etapaeditar" method="GET" resourcePath="/etapaeditar" id="159185aa-00f7-4967-826b-1f326081fad0"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="22353f96-6947-44ab-9961-a8936206d053" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
	"etapa":
	{"id":1,
	"lote":150,
	"fecha":"2019-05-29",
	"titulo":"siembra",
	"titulorecipiente":"Parcela",
	"estado":"En Curso",
	"establecimiento":
	{
	"id":1,
	"titulo":"Finca1"
	},
	"recipiente":"Recipiente2",
	"op":74,
	"materias":
	[{"id":1,
 "titulo": "Ajo Morado",
 "descripcion":"ajito",
 "stock":700,
 "cantidad":50
}],
"tareas":[
{"id":1,
 "titulo": "regar",
 "descripcion": "regar parcelas",
 "duracion": "4 horas",
 "formulario":"",
 "formula":
 [{"titulo":"fertilizante",
  "cantidad":200,
  "unidad":"kg"
 },
 {"titulo":"Nutriente 7",
  "cantidad":300,
  "unidad":"kg"
 },
 {"titulo":"Recurso 4",
  "cantidad":100,
  "unidad":"litros"
 }],
 "asignado":"Roberto",
 "estado":"En Curso"
},
{"id":2,
 "titulo": "cortar",
 "descripcion": "cortar el ajo",
 "duracion": "6 horas",
  "formula":"",
 "formulario":11,
  "asignado":"Juan",
 "estado":"Terminado"
}]
	}
}
</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/insertatarea" method="GET" resourcePath="/insertatarea" id="3af04bb5-536d-4199-b302-c07bc6b9109d"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="637e8f60-00ea-4a46-bbfd-5f884ec2dec1" httpResponseStatus="200"><con:settings/><con:responseContent>{"id":7}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/languageing" method="GET" resourcePath="/languageing" id="5661178d-c837-4c3e-9f2d-c9f796450f40"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="1f22b3b2-7299-45c3-bf22-31eb014cb0da" httpResponseStatus="200"><con:settings/><con:responseContent>{"labels":
{
"label":[
{
"id":"label1",
"texto":"hello"
},
{
"id":"label2",
"texto":"bye bye"
},
{
"id":"titulo",
"texto":"title"
},
{
"id":"descripcion",
"texto":"description"
},
{
"id":"id",
"texto":"id"
},
{
"id":"stock",
"texto":"stock"
},
{
"id":"navegacion",
"texto":"Main Navigation"
},
{
"id":"mistareas",
"texto":"My Tasks"
},
{
"id":"Etapas",
"texto":"Stages"
},
{
"id":"Fraccionar",
"texto":"Fraction"
},
{
"id":"CargarCamion",
"texto":"Load Truck"
},
{
"id":"EntrarCamion",
"texto":"Truck-in"
},
{
"id":"duracion",
"texto":"duration"
},
{
"id":"formulario",
"texto":"form"
},
{
"id":"disponible",
"texto":"Avaible"
},
{
"id":"equipo",
"texto":"Machine"
},
{
"id":"capacidad",
"texto":"Capacity"
},
{
"id":"formula",
"texto":"recipe"
},
{
"id":"tareas",
"texto":"tasks"
},
{
"id":"materias",
"texto":"Origin"
},
{
"id":"SalidaCamion",
"texto":"Truck-out"
},
{
"id":"label3",
"texto":"who?"
}
]
}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/establecimientotodos" method="GET" resourcePath="/establecimientotodos" id="3a5c02fc-37fc-4b7b-9e46-afb378f9d1ac"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="31f24249-9d44-42f4-a1a4-211ec31db657" httpResponseStatus="200"><con:settings/><con:responseContent>{
"establecimientos":
{"establecimiento":
[
{
"id":"1",
 "titulo":"Finca1"
 },
 {
 "id":"2",
 "titulo":"Finca2"
 },
 {"id":"3",
 "titulo":"Finca3"
 },
 {
"id":"4",
 "titulo":"Almacen1"
 },
 {
 "id":"5",
 "titulo":"Almacen2"
 },
 {"id":"6",
 "titulo":"Almacen3"
 }
 ]
}
 }</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/camiones1" method="GET" resourcePath="/camiones1" id="91b2c58e-178f-4d40-b19d-c0c7d2b9a5df"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="f97ce6b7-af08-40a0-a2b2-824284592081" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"camiones":
{"camion":
[
{"id":1,
"fecha":"2019-05-28",
"patente":"ABC 123",
"conductor":"Hugo Capria"
},
{"id":2,
"fecha":"2019-05-29",
"patente":"AGG 323",
"conductor":"Roberto Sanchez"
},
{"id":3,
"fecha":"2019-05-28",
"patente":"GGG 666",
"conductor":"Guillermo Gouiric"
}
]
}
}
</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/camiones2" method="GET" resourcePath="/camiones2" id="aef897bd-a86d-4d9e-b3d7-f73efed900bf"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="505e2e28-f8ff-4ab0-ab5a-c677a6ea2eb2" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"camiones":
{"camion":
[
{"id":4,
"fecha":"2019-05-28",
"patente":"YXP 153",
"conductor":"Fernando Leiva"
},
{"id":2,
"fecha":"2019-05-30",
"patente":"NIG 223",
"conductor":"Rodolfo Ruiz"
},
{"id":3,
"fecha":"2019-05-28",
"patente":"LOL 778",
"conductor":"Eliana Bernaldez"
}
]
}
}
</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/lotenosalida1" method="GET" resourcePath="/lotenosalida1" id="0c2215a2-929b-40ba-8f04-5ce89aecda45"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="4fb93a1c-fb81-4087-a788-8617e2f45dcf" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"lotes":
{"lote":
[
{"id":1,
"envase":1,
"titulo":"LN 15",
"fecha": "2019-05-30",
"tituloenvase":"Recipiente 1",
"producto":2,
"tituloproducto":"Ajito Morado",
"stock":100
},
{"id":2,
"envase":3,
"titulo":"LN 20",
"tituloenvase":"Bins 4",
"producto":1,
"fecha": "2019-05-30",
"tituloproducto":"Ajo Grande",
"stock":150
},
{"id":3,
"envase":1,
"fecha": "2019-05-30",
"titulo":"LN 151",
"tituloenvase":"Recipiente 1",
"producto":4,
"tituloproducto":"Ajito Verde",
"stock":100
},
{"id":4,
"envase":4,
"titulo":"LN 152",
"tituloenvase":"Cajas 1",
"fecha": "2019-05-30",
"producto":3,
"tituloproducto":"Cajas de Ajo fraccionadas",
"stock":100
},
{"id":5,
"envase":6,
"titulo":"LN 201",
"fecha": "2019-05-30",
"tituloenvase":"Recipiente 5",
"producto":7,
"tituloproducto":"Ajito organico",
"stock":100
}
]
}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/lotesalida1" method="GET" resourcePath="/lotesalida1" id="568808c7-9e5b-4a25-a31d-489dd100436e"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="90abb1f7-93b2-44aa-a9b7-ccc2a39ac048" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"lotes":
{"lote":
[
{"id":1,
"envase":1,
"fecha": "2019-05-30",
"titulo":"LN 15",
"tituloenvase":"Recipiente 1",
"producto":2,
"tituloproducto":"Ajito Morado",
"stock":100
},
{"id":2,
"envase":3,
"titulo":"LN 20",
"tituloenvase":"Bins 4",
"producto":1,
"fecha": "2019-05-30",
"tituloproducto":"Ajo Grande",
"stock":150
},
{"id":5,
"envase":6,
"titulo":"LN 201",
"fecha": "2019-05-30",
"tituloenvase":"Recipiente 5",
"producto":7,
"tituloproducto":"Ajito organico",
"stock":100
}
]
}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/lotenosalida2" method="GET" resourcePath="/lotenosalida2" id="70854b4e-f7cb-4ab9-80eb-d2631d7f6a31"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="f2b8c5f1-2e8e-4a90-93c5-72c10c2a83dc" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"lotes":
{"lote":
[
{"id":6,
"envase":10,
"titulo":"LN 111",
"fecha": "2019-05-30",
"tituloenvase":"Recipiente Tipo D",
"producto":2,
"tituloproducto":"Ajito Morado",
"stock":120
},
{"id":7,
"envase":8,
"titulo":"LN 115",
"tituloenvase":"Bins 6",
"producto":9,
"fecha": "2019-05-30",
"tituloproducto":"Ajo Chico",
"stock":180
},
{"id":8,
"envase":1,
"titulo":"LN 301",
"fecha": "2019-05-30",
"tituloenvase":"Recipiente 1",
"producto":4,
"tituloproducto":"Ajito Verde",
"stock":1000
},
{"id":9,
"titulo":"LN 4",
"envase":4,
"tituloenvase":"Cajas 1",
"fecha": "2019-05-30",
"producto":11,
"tituloproducto":"Cajas de Ajito fraccionadas",
"stock":170
},
{"id":10,
"envase":6,
"titulo":"LN 51",
"fecha": "2019-05-30",
"tituloenvase":"Recipiente 5",
"producto":7,
"tituloproducto":"Ajito organico",
"stock":800
}
]
}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/lotesalida2" method="GET" resourcePath="/lotesalida2" id="256069b0-aa0b-4370-b3bf-d2da7e59899c"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="a44487c0-071b-45f4-a5e1-ecc88bed85ea" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"lotes":
{"lote":
[
{"id":7,
"envase":8,
"tituloenvase":"Bins 6",
"titulo":"LN 115",
"producto":9,
"fecha": "2019-05-30",
"tituloproducto":"Ajo Chico",
"stock":180
},
{"id":9,
"envase":4,
"titulo":"LN 4",
"tituloenvase":"Cajas 1",
"fecha": "2019-05-30",
"producto":11,
"tituloproducto":"Cajas de Ajito fraccionadas",
"stock":170
}
]
}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/lotestodo" method="GET" resourcePath="/lotestodo" id="18e9b892-1570-4d45-ac86-8d82f781bdcf"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="117d3447-2bc1-4106-9434-50d289e402ab" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"lotes":
{"lote":
[
{"id":1,
"envase":1,
"titulo":"LN 15",
"fecha": "2019-05-30",
"tituloenvase":"Recipiente 1",
"producto":2,
"tituloproducto":"Ajito Morado",
"stock":100
},
{"id":2,
"envase":3,
"titulo":"LN 20",
"tituloenvase":"Bins 4",
"producto":1,
"fecha": "2019-05-30",
"tituloproducto":"Ajo Grande",
"stock":150
},
{"id":3,
"envase":1,
"fecha": "2019-05-30",
"titulo":"LN 151",
"tituloenvase":"Recipiente 1",
"producto":4,
"tituloproducto":"Ajito Verde",
"stock":100
},
{"id":4,
"envase":4,
"titulo":"LN 152",
"tituloenvase":"Cajas 1",
"fecha": "2019-05-30",
"producto":3,
"tituloproducto":"Cajas de Ajo fraccionadas",
"stock":100
},
{"id":5,
"envase":6,
"titulo":"LN 201",
"fecha": "2019-05-30",
"tituloenvase":"Recipiente 5",
"producto":7,
"tituloproducto":"Ajito organico",
"stock":100
},
{"id":6,
"envase":10,
"titulo":"LN 111",
"fecha": "2019-05-30",
"tituloenvase":"Recipiente Tipo D",
"producto":2,
"tituloproducto":"Ajito Morado",
"stock":120
},
{"id":7,
"envase":8,
"titulo":"LN 115",
"tituloenvase":"Bins 6",
"producto":9,
"fecha": "2019-05-30",
"tituloproducto":"Ajo Chico",
"stock":180
},
{"id":8,
"envase":1,
"titulo":"LN 301",
"fecha": "2019-05-30",
"tituloenvase":"Recipiente 1",
"producto":4,
"tituloproducto":"Ajito Verde",
"stock":1000
},
{"id":9,
"titulo":"LN 4",
"envase":4,
"tituloenvase":"Cajas 1",
"fecha": "2019-05-30",
"producto":11,
"tituloproducto":"Cajas de Ajito fraccionadas",
"stock":170
},
{"id":10,
"envase":6,
"titulo":"LN 51",
"fecha": "2019-05-30",
"tituloenvase":"Recipiente 5",
"producto":7,
"tituloproducto":"Ajito organico",
"stock":800
}
]
}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/empaques" method="GET" resourcePath="/empaques" id="f7f38c90-fde9-4fb3-88fd-848c15273f60"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="b5bcbf17-17f1-41c9-bc20-14c3e38c9d6f" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"empaques":
{"empaque":
[
{
	"id":1,
	"titulo":"Botellita",
	"unidad":"ml",
	"volumen":30
},
{
	"id":2,
	"titulo":"Caja 3",
	"unidad":"kg",
	"volumen":50
},
{
	"id":3,
	"titulo":"Bolson",
	"unidad":"kg",
	"volumen":50
},
{
	"id":4,
	"titulo":"Botella tipo 11",
	"unidad":"l",
	"volumen":2
},
{
	"id":5,
	"titulo":"Bin Tipo 4",
	"unidad":"kg",
	"volumen":500
}
]
}
}
</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/fraccioneditar" method="GET" resourcePath="/fraccioneditar" id="1dd43bac-f20c-43cd-bf1e-23ed9565533a"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="11faabc2-e083-4686-8e5a-754e05424a6d" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
	"etapa":
	{"id":3,
	"fecha":"2019-05-29",
	"titulo":"fraccionamiento",
	"titulorecipiente":"Tanque",
	"estado":"En Curso",
	"establecimiento":
	{
	"id":1,
	"titulo":"Almacen2"
	},
	"recipiente":"Recipiente2",
     "productos":
     [
     {"id":1,
     "titulo": "ajo Morado",
     "empaque":1,
     "empaquetitulo":"Botellita",
     "cantidad":40,
     "loteid":1,
     "lote":"LN90"
     },
     {"id":2,
     "titulo": "ajo organico",
     "empaque":3,
     "empaquetitulo":"Bolson",
     "titulorecipiente":"Tanque",
     "cantidad":20,
     "loteid":2,
     "lote":"LN120"
     },
     {"id":3,
     "titulo": "ajo Verde",
     "empaque":4,
     "empaquetitulo":"Botella Tipo 11",
     "cantidad":100,
     "loteid":3,
     "lote":"LN150"
     }
	]
	}
	}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/fraccionarnuevo" method="GET" resourcePath="/fraccionarnuevo" id="1a57a88a-a945-4dcf-bbfe-f59f849f2650"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="276de549-75e9-4622-be34-294346bacd67" httpResponseStatus="200"><con:settings/><con:responseContent>{
	"etapa":
	{"id":7,
	"fecha":"",
	"titulo":"fraccionamiento",
	"establecimiento":"",
	"titulorecipiente":"Tanque",
	"recipiente":"",
	"estado":"planificado",
	"productos":""
	}
}
</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/proveedores" method="GET" resourcePath="/proveedores" id="cbc29a9a-d664-4098-8138-635489f11c79"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="f42fee76-182d-40ce-828c-04e25fcac5a7" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"proveedores":
{"proveedor":
[
{"id":1,
"titulo":"Juan Perez",
"cuit":"20-3856974-4"
},
{"id":2,
"titulo":"Ernesto Riquelme",
"cuit":"20-3146974-7"
},
{"id":3,
"titulo":"Huiguito Capria",
"cuit":"20-18579724-4"
},
{"id":4,
"titulo":"Fernando Leiva",
"cuit":"20-40569741-1"
},
{"id":6,
"titulo":"Fernando Leiva",
"cuit":"20-40569741-2"
},
{"id":5,
"titulo":"Guillermo Gouiric",
"cuit":"20-38216621-4"
}
]
}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/cargados" method="GET" resourcePath="/cargados" id="30dadb5b-4f10-4e81-a02b-ca6ce3561316"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="34eb40fc-6837-4b18-a3d6-bd7f88885aa6" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"camiones":
{"camion":
[
{"id":1,
"fecha":"2019-05-28",
"patente":"ABC 123",
"conductor":"Hugo Capria",
"acoplado":1,
"productos":
     [
     {"id":1,
     "titulo": "ajo Morado",
     "empaque":1,
     "empaquetitulo":"Botellita",
     "cantidad":40,
     "loteid":1,
     "lote":"LN90"
     },
     {"id":2,
     "titulo": "ajo organico",
     "empaque":3,
     "empaquetitulo":"Bolson",
     "cantidad":20,
     "loteid":2,
     "lote":"LN120"
     },
     {"id":3,
     "titulo": "ajo Verde",
     "empaque":4,
     "empaquetitulo":"Botella Tipo 11",
     "cantidad":100,
     "loteid":3,
     "lote":"LN150"
     }
	]
},
{"id":2,
"fecha":"2019-05-28",
"patente":"ADD 423",
"conductor":"Fernando Leiva",
"acoplado":2,
"productos":
     [
     {"id":1,
     "titulo": "ajo Morado",
     "empaque":1,
     "empaquetitulo":"Botellita",
     "cantidad":40,
     "loteid":1,
     "lote":"LN90"
     },
     {"id":2,
     "titulo": "ajo organico",
     "empaque":3,
     "empaquetitulo":"Bolson",
     "cantidad":20,
     "loteid":2,
     "lote":"LN120"
     }
	]
}
]
}
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>